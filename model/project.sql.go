// Code generated by sqlc. DO NOT EDIT.
// source: project.sql

package model

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM project WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProjectStmt, deleteProject, id)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, member_id, name, description, technology, url, create_at, update_at FROM project WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProjectByID(ctx context.Context, id uuid.UUID) (Project, error) {
	row := q.queryRow(ctx, q.getProjectByIDStmt, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.Name,
		&i.Description,
		&i.Technology,
		&i.Url,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getProjectsByMemberID = `-- name: GetProjectsByMemberID :many
SELECT id, member_id, name, description, technology, url, create_at, update_at FROM project WHERE member_id = $1
`

func (q *Queries) GetProjectsByMemberID(ctx context.Context, memberID uuid.UUID) ([]Project, error) {
	rows, err := q.query(ctx, q.getProjectsByMemberIDStmt, getProjectsByMemberID, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.Name,
			&i.Description,
			&i.Technology,
			&i.Url,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProject = `-- name: InsertProject :one
INSERT INTO project (member_id, name, description, technology, url) VALUES ($1, $2, $3, $4, $5) RETURNING id, member_id, name, description, technology, url, create_at, update_at
`

type InsertProjectParams struct {
	MemberID    uuid.UUID      `json:"member_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Technology  string         `json:"technology"`
	Url         string         `json:"url"`
}

func (q *Queries) InsertProject(ctx context.Context, arg InsertProjectParams) (Project, error) {
	row := q.queryRow(ctx, q.insertProjectStmt, insertProject,
		arg.MemberID,
		arg.Name,
		arg.Description,
		arg.Technology,
		arg.Url,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.Name,
		&i.Description,
		&i.Technology,
		&i.Url,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE project SET name = $2, description = $3, technology = $4, url = $5 WHERE id = $1 RETURNING id, member_id, name, description, technology, url, create_at, update_at
`

type UpdateProjectParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Technology  string         `json:"technology"`
	Url         string         `json:"url"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.queryRow(ctx, q.updateProjectStmt, updateProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Technology,
		arg.Url,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.Name,
		&i.Description,
		&i.Technology,
		&i.Url,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
