// Code generated by sqlc. DO NOT EDIT.
// source: attempt.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const deleteAttempt = `-- name: DeleteAttempt :exec
DELETE FROM attempt WHERE id = $1
`

func (q *Queries) DeleteAttempt(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAttemptStmt, deleteAttempt, id)
	return err
}

const getAttemptByID = `-- name: GetAttemptByID :one
SELECT id, member_id, problem_id, language, is_solved, score, code, create_at, update_at FROM attempt WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAttemptByID(ctx context.Context, id uuid.UUID) (Attempt, error) {
	row := q.queryRow(ctx, q.getAttemptByIDStmt, getAttemptByID, id)
	var i Attempt
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.ProblemID,
		&i.Language,
		&i.IsSolved,
		&i.Score,
		&i.Code,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getAttemptsByMemberID = `-- name: GetAttemptsByMemberID :many
SELECT id, member_id, problem_id, language, is_solved, score, code, create_at, update_at FROM attempt WHERE member_id = $1
`

func (q *Queries) GetAttemptsByMemberID(ctx context.Context, memberID uuid.UUID) ([]Attempt, error) {
	rows, err := q.query(ctx, q.getAttemptsByMemberIDStmt, getAttemptsByMemberID, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attempt
	for rows.Next() {
		var i Attempt
		if err := rows.Scan(
			&i.ID,
			&i.MemberID,
			&i.ProblemID,
			&i.Language,
			&i.IsSolved,
			&i.Score,
			&i.Code,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAttempt = `-- name: InsertAttempt :one
INSERT INTO attempt (member_id, problem_id, language, is_solved, score, code) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, member_id, problem_id, language, is_solved, score, code, create_at, update_at
`

type InsertAttemptParams struct {
	MemberID  uuid.UUID    `json:"member_id"`
	ProblemID uuid.UUID    `json:"problem_id"`
	Language  LanguageType `json:"language"`
	IsSolved  bool         `json:"is_solved"`
	Score     int16        `json:"score"`
	Code      string       `json:"code"`
}

func (q *Queries) InsertAttempt(ctx context.Context, arg InsertAttemptParams) (Attempt, error) {
	row := q.queryRow(ctx, q.insertAttemptStmt, insertAttempt,
		arg.MemberID,
		arg.ProblemID,
		arg.Language,
		arg.IsSolved,
		arg.Score,
		arg.Code,
	)
	var i Attempt
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.ProblemID,
		&i.Language,
		&i.IsSolved,
		&i.Score,
		&i.Code,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateAttempt = `-- name: UpdateAttempt :one
UPDATE attempt SET language = $2, is_solved = $3, score = $4, code = $5 WHERE id = $1 RETURNING id, member_id, problem_id, language, is_solved, score, code, create_at, update_at
`

type UpdateAttemptParams struct {
	ID       uuid.UUID    `json:"id"`
	Language LanguageType `json:"language"`
	IsSolved bool         `json:"is_solved"`
	Score    int16        `json:"score"`
	Code     string       `json:"code"`
}

func (q *Queries) UpdateAttempt(ctx context.Context, arg UpdateAttemptParams) (Attempt, error) {
	row := q.queryRow(ctx, q.updateAttemptStmt, updateAttempt,
		arg.ID,
		arg.Language,
		arg.IsSolved,
		arg.Score,
		arg.Code,
	)
	var i Attempt
	err := row.Scan(
		&i.ID,
		&i.MemberID,
		&i.ProblemID,
		&i.Language,
		&i.IsSolved,
		&i.Score,
		&i.Code,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
