// Code generated by sqlc. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteMemberStmt, err = db.PrepareContext(ctx, deleteMember); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMember: %w", err)
	}
	if q.getMemberByIDStmt, err = db.PrepareContext(ctx, getMemberByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMemberByID: %w", err)
	}
	if q.getMemberByUsernameStmt, err = db.PrepareContext(ctx, getMemberByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetMemberByUsername: %w", err)
	}
	if q.getMembersStmt, err = db.PrepareContext(ctx, getMembers); err != nil {
		return nil, fmt.Errorf("error preparing query GetMembers: %w", err)
	}
	if q.insertMemberStmt, err = db.PrepareContext(ctx, insertMember); err != nil {
		return nil, fmt.Errorf("error preparing query InsertMember: %w", err)
	}
	if q.updateMemberStmt, err = db.PrepareContext(ctx, updateMember); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMember: %w", err)
	}
	if q.updatePasswordMemberStmt, err = db.PrepareContext(ctx, updatePasswordMember); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePasswordMember: %w", err)
	}
	if q.updateSosmedMemberStmt, err = db.PrepareContext(ctx, updateSosmedMember); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSosmedMember: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteMemberStmt != nil {
		if cerr := q.deleteMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMemberStmt: %w", cerr)
		}
	}
	if q.getMemberByIDStmt != nil {
		if cerr := q.getMemberByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMemberByIDStmt: %w", cerr)
		}
	}
	if q.getMemberByUsernameStmt != nil {
		if cerr := q.getMemberByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMemberByUsernameStmt: %w", cerr)
		}
	}
	if q.getMembersStmt != nil {
		if cerr := q.getMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMembersStmt: %w", cerr)
		}
	}
	if q.insertMemberStmt != nil {
		if cerr := q.insertMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertMemberStmt: %w", cerr)
		}
	}
	if q.updateMemberStmt != nil {
		if cerr := q.updateMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMemberStmt: %w", cerr)
		}
	}
	if q.updatePasswordMemberStmt != nil {
		if cerr := q.updatePasswordMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePasswordMemberStmt: %w", cerr)
		}
	}
	if q.updateSosmedMemberStmt != nil {
		if cerr := q.updateSosmedMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSosmedMemberStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	deleteMemberStmt         *sql.Stmt
	getMemberByIDStmt        *sql.Stmt
	getMemberByUsernameStmt  *sql.Stmt
	getMembersStmt           *sql.Stmt
	insertMemberStmt         *sql.Stmt
	updateMemberStmt         *sql.Stmt
	updatePasswordMemberStmt *sql.Stmt
	updateSosmedMemberStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		deleteMemberStmt:         q.deleteMemberStmt,
		getMemberByIDStmt:        q.getMemberByIDStmt,
		getMemberByUsernameStmt:  q.getMemberByUsernameStmt,
		getMembersStmt:           q.getMembersStmt,
		insertMemberStmt:         q.insertMemberStmt,
		updateMemberStmt:         q.updateMemberStmt,
		updatePasswordMemberStmt: q.updatePasswordMemberStmt,
		updateSosmedMemberStmt:   q.updateSosmedMemberStmt,
	}
}
