// Code generated by sqlc. DO NOT EDIT.
// source: member.sql

package model

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM member WHERE id = $1
`

func (q *Queries) DeleteMember(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteMemberStmt, deleteMember, id)
	return err
}

const getMemberByID = `-- name: GetMemberByID :one
SELECT id, name, username, password, email, twitter, github, linkedin, create_at, update_at FROM member WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMemberByID(ctx context.Context, id uuid.UUID) (Member, error) {
	row := q.queryRow(ctx, q.getMemberByIDStmt, getMemberByID, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Twitter,
		&i.Github,
		&i.Linkedin,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getMemberByUsername = `-- name: GetMemberByUsername :one
SELECT id, name, username, password, email, twitter, github, linkedin, create_at, update_at FROM member WHERE username = $1 LIMIT 1
`

func (q *Queries) GetMemberByUsername(ctx context.Context, username string) (Member, error) {
	row := q.queryRow(ctx, q.getMemberByUsernameStmt, getMemberByUsername, username)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Twitter,
		&i.Github,
		&i.Linkedin,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getMembers = `-- name: GetMembers :many
SELECT id, name, username, password, email, twitter, github, linkedin, create_at, update_at FROM member
`

func (q *Queries) GetMembers(ctx context.Context) ([]Member, error) {
	rows, err := q.query(ctx, q.getMembersStmt, getMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Twitter,
			&i.Github,
			&i.Linkedin,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMember = `-- name: InsertMember :one
INSERT INTO member (username, password) VALUES ($1, $2) RETURNING id, name, username, password, email, twitter, github, linkedin, create_at, update_at
`

type InsertMemberParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) InsertMember(ctx context.Context, arg InsertMemberParams) (Member, error) {
	row := q.queryRow(ctx, q.insertMemberStmt, insertMember, arg.Username, arg.Password)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Twitter,
		&i.Github,
		&i.Linkedin,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateMember = `-- name: UpdateMember :one
UPDATE member SET name = $2, username = $3, email = $4 WHERE id = $1 RETURNING id, name, username, password, email, twitter, github, linkedin, create_at, update_at
`

type UpdateMemberParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.queryRow(ctx, q.updateMemberStmt, updateMember,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Twitter,
		&i.Github,
		&i.Linkedin,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const updatePasswordMember = `-- name: UpdatePasswordMember :one
UPDATE member SET password = $2 WHERE id = $1 RETURNING id, name, username, password, email, twitter, github, linkedin, create_at, update_at
`

type UpdatePasswordMemberParams struct {
	ID       uuid.UUID `json:"id"`
	Password string    `json:"password"`
}

func (q *Queries) UpdatePasswordMember(ctx context.Context, arg UpdatePasswordMemberParams) (Member, error) {
	row := q.queryRow(ctx, q.updatePasswordMemberStmt, updatePasswordMember, arg.ID, arg.Password)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Twitter,
		&i.Github,
		&i.Linkedin,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateSosmedMember = `-- name: UpdateSosmedMember :one
UPDATE member SET twitter = $2, github = $3, linkedin = $4 WHERE id = $1 RETURNING id, name, username, password, email, twitter, github, linkedin, create_at, update_at
`

type UpdateSosmedMemberParams struct {
	ID       uuid.UUID      `json:"id"`
	Twitter  sql.NullString `json:"twitter"`
	Github   sql.NullString `json:"github"`
	Linkedin sql.NullString `json:"linkedin"`
}

func (q *Queries) UpdateSosmedMember(ctx context.Context, arg UpdateSosmedMemberParams) (Member, error) {
	row := q.queryRow(ctx, q.updateSosmedMemberStmt, updateSosmedMember,
		arg.ID,
		arg.Twitter,
		arg.Github,
		arg.Linkedin,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Twitter,
		&i.Github,
		&i.Linkedin,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
