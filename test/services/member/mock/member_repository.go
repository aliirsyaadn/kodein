// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/member/main.go

// Package mock_member is a generated GoMock package.
package mock_member

import (
	context "context"
	reflect "reflect"

	entity "github.com/aliirsyaadn/kodein/entity"
	model "github.com/aliirsyaadn/kodein/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockService) CreateMember(ctx context.Context, arg *entity.CreateMemberRequest) (*entity.CreateMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, arg)
	ret0, _ := ret[0].(*entity.CreateMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockServiceMockRecorder) CreateMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockService)(nil).CreateMember), ctx, arg)
}

// DeleteMember mocks base method.
func (m *MockService) DeleteMember(ctx context.Context, id *string) (*entity.DeleteMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx, id)
	ret0, _ := ret[0].(*entity.DeleteMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockServiceMockRecorder) DeleteMember(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockService)(nil).DeleteMember), ctx, id)
}

// GetMemberByID mocks base method.
func (m *MockService) GetMemberByID(ctx context.Context, id *string) (*entity.GetMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByID", ctx, id)
	ret0, _ := ret[0].(*entity.GetMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByID indicates an expected call of GetMemberByID.
func (mr *MockServiceMockRecorder) GetMemberByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByID", reflect.TypeOf((*MockService)(nil).GetMemberByID), ctx, id)
}

// GetMembers mocks base method.
func (m *MockService) GetMembers(ctx context.Context) (*entity.ListMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", ctx)
	ret0, _ := ret[0].(*entity.ListMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockServiceMockRecorder) GetMembers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockService)(nil).GetMembers), ctx)
}

// UpdateMember mocks base method.
func (m *MockService) UpdateMember(ctx context.Context, arg *entity.UpdateMemberRequest, id *string) (*entity.UpdateMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", ctx, arg, id)
	ret0, _ := ret[0].(*entity.UpdateMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockServiceMockRecorder) UpdateMember(ctx, arg, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockService)(nil).UpdateMember), ctx, arg, id)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteMember mocks base method.
func (m *MockRepository) DeleteMember(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockRepositoryMockRecorder) DeleteMember(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockRepository)(nil).DeleteMember), ctx, id)
}

// GetMemberByID mocks base method.
func (m *MockRepository) GetMemberByID(ctx context.Context, id uuid.UUID) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByID", ctx, id)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByID indicates an expected call of GetMemberByID.
func (mr *MockRepositoryMockRecorder) GetMemberByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByID", reflect.TypeOf((*MockRepository)(nil).GetMemberByID), ctx, id)
}

// GetMembers mocks base method.
func (m *MockRepository) GetMembers(ctx context.Context) ([]model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", ctx)
	ret0, _ := ret[0].([]model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockRepositoryMockRecorder) GetMembers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockRepository)(nil).GetMembers), ctx)
}

// InsertMember mocks base method.
func (m *MockRepository) InsertMember(ctx context.Context, arg model.InsertMemberParams) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMember", ctx, arg)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMember indicates an expected call of InsertMember.
func (mr *MockRepositoryMockRecorder) InsertMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMember", reflect.TypeOf((*MockRepository)(nil).InsertMember), ctx, arg)
}

// UpdateMember mocks base method.
func (m *MockRepository) UpdateMember(ctx context.Context, arg model.UpdateMemberParams) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", ctx, arg)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockRepositoryMockRecorder) UpdateMember(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockRepository)(nil).UpdateMember), ctx, arg)
}
